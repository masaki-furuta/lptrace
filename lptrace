#!/usr/bin/env python2
# lptrace - Copyright (c) 2016 Karim Hamidou.
# Portions inspired by Pyrasite.
import os
import sys
import signal
import tempfile
import subprocess

from argparse import ArgumentParser

trace_fn = """
def __lptrace_trace_calls__(frame, event, arg):
    if event != 'call':
        return

    code = frame.f_code
    with open(__LPTRACE_FIFO_NAME__, 'w') as fifo:
        fifo.write("{} ({}:{})\\n".format(code.co_name,
                                       code.co_filename, frame.f_lineno))

__LPTRACE_FIFO_NAME__ = "%s"
__LPTRACE_OUTPUT_FIFO__ = None
import os
import sys ; sys.settrace(__lptrace_trace_calls__)"""


untrace_fn = """import sys ; sys.settrace(None)"""


def runfile(pid, script, autoclose=True):
    tmp = tempfile.NamedTemporaryFile();
    name = tmp.name
    tmp.write(script)
    tmp.file.flush()
    os.chmod(tmp.name, 0666)
    cmd = 'execfile(\\"{}\\")'.format(name)
    p = inject(pid, cmd)
    if autoclose:
        p.wait()
        tmp.close()
        return None
    else:
        return p, tmp


def create_fifo():
    fifo = tempfile.mktemp()
    os.mkfifo(fifo)
    os.chmod(fifo, 0777)
    return fifo

def strace(pid):
    fifo_name = create_fifo()

    trace_code = trace_fn % fifo_name
    runfile(pid, trace_code)

    # Remove the trace if the user types Ctrl-C:
    def sigint_handler(signal, frame):
        print 'Received Ctrl-C, quitting'
        runfile(pid, untrace_fn)
        sys.exit(0)

    signal.signal(signal.SIGINT, sigint_handler)

    with open(fifo_name) as fd:
        while True:
            data = fd.read()
            if data != '':
                print data


print_stacktrace_fn = """
import traceback
import threading
import sys

def print_stacktrace(out_fifo):
    out_channel = open(out_fifo, 'w')
    #traceback.print_stack(file=out_channel)
    print len(threading.enumerate())
    for th in threading.enumerate():
        out_channel.write('%%r\\n' %% th)
        traceback.print_stack(sys._current_frames()[th.ident], file=out_channel)
        out_channel.write('\\n')
    out_channel.close()

OUTPUT_FIFO = '%s'

print_stacktrace(OUTPUT_FIFO)
"""


def print_stacktrace(pid):
    def sigint_handler(signal, frame):
        print 'Received Ctrl-C, quitting'
        sys.exit(0)

    signal.signal(signal.SIGINT, sigint_handler)

    out_fifo = create_fifo()
    code = print_stacktrace_fn % (out_fifo)

    p, tmp_f = runfile(pid, code, autoclose=False)

    with open(out_fifo, 'r') as of:
        while True:
            l = of.read()
            if l == '':
                break
            print l

    p.wait()
    tmp_f.close()


def pdb_prompt(pid):
    code = 'import pdb ; pdb.set_trace()'
    inject(pid, code)


def inject(pid, code):
    """Executes a file in a running Python process."""
    gdb_cmds = [
        'PyGILState_Ensure()',
        'PyRun_SimpleString("{}")'.format(code),
        'PyGILState_Release($1)',
        ]

    cmdline = 'gdb -p %d -batch %s' % (pid,
        ' '.join(["-eval-command='call %s'" % cmd for cmd in gdb_cmds]))

    #print 'Executing %s' % cmdline

    p = subprocess.Popen(cmdline, shell=True, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE, )
    return p


def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0


def main():
    parser = ArgumentParser('lptrace')
    parser.add_argument("-p", "--process", dest="pid", required=True,
                        help="Attach to prod $pid")

    group = parser.add_mutually_exclusive_group()

    group.add_argument("-d", "--debugger",
                     action="store_true", dest="debugger", default=False,
                     help="Inject a pdb prompt")
    group.add_argument("-s", "--stacktrace",
                     action="store_true", dest="stacktrace", default=False,
                     help="Print stacktrace")

    args = parser.parse_args()

    pid = int(args.pid)

    if not cmd_exists('gdb'):
        print "Error: lptrace requires GDB >= 7.x. Exiting."
        sys.exit(-1)

    if os.geteuid() != 0:
        print "Error: you must be root to run lptrace. Exiting."
        sys.exit(-1)

    if args.debugger:
        pdb_prompt(pid)
    elif args.stacktrace:
        print_stacktrace(pid)
    else:
        strace(pid)


if __name__ == '__main__':
    main()
